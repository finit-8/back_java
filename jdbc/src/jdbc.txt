MVC

손님이 마라탕을 주문(View)하려고 마라탕 재료를 그릇(VO)에 담음.
--> 마라탕 재료가 담긴 그릇(VO)을 서빙직원(Controller)이 주방(DB)에 전달할지 결정.
--> 주방장(DAO)이 주방(DB)에서 조리(DAO의 메서드)한 마라탕 그릇(VO)을 서빙직원(Controller)한테 전달.
--> 서빙직원이 손님한테 제공(View)
DB커넥터 : 주방장(DAO)이 주방(DB)의 조리도구선반(테이블)안에 조리도구(테이블의 행)에 접근할 수 있도록 JDBC 드라이버 등의 .jar(선반열쇠)를 제공.
API는 코드 그대로 갖다 넣고 값만 바꾸면 되는데, DAO안에 코드들이 바로 API코드다.

M 모델링 - 데이터와 DB 처리 로직을 담당하며, VO(Value Object) 클래스와 DAO(Data Access Object) 클래스로 구성된다. 
		- VO 클래스는 DB의 한 행 데이터를 담는 그릇 역할을 하며, 오직 private 필드, 생성자, getter/setter, toString(), hashCode(), equals()만 정의하고 다른 로직은 포함하지 않는다.
		- DAO 클래스는 DB와 직접 통신하여 쿼리를 실행하고, 결과를 VO 객체로 반환한다.
		
V 뷰(프론트) - 사용자로부터 입력을 받고, 사용자에게 데이터를 보여주는 화면으로, DB와 직접 통신하지 않고 VO와 Controller를 통해 데이터를 주고받는다.

C 컨트롤러 - 사용자의 요청을 받아 어떤 DAO 메서드를 호출할지 결정하고, DAO로부터 받은 VO 데이터를 View에 전달하는 흐름을 조율하는 역할을 한다. 
			ex) 사용자가 “포카리”를 검색하면 Controller가 DAO를 호출하여 DB에서 VO를 받아오고, VO 객체가 여러 개라면 ArrayList에 담아 View로 전달하여 사용자에게 결과를 보여준다. 